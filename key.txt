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





import json
from difflib import get_close_matches


def load_knowledge_base(file_path: str) -> dict:
    with open(file_path, "r") as file:
        data: dict = json.load(file)
    return data


def save_knowledge_base(file_path: str, data: dict):
    with open(file_path, "w") as file:
        json.dump(data, file, indent=2)


def find_best_match(user_question: str, questions: list[str]) -> str | None:
    matches: list = get_close_matches(user_question, questions, n=1, cutoff=0.6)
    return matches[0] if matches else None


def get_answer_for_question(question: str, knowledge_base: dict) -> str | None:
    for q in knowledge_base["questions"]:
        if q["question"] == question:
            return q["answer"]


def chat_bot():
    knowledge_base: dict = load_knowledge_base("knowledge_base.json")

    while True:
        user_input: str = input("You:")

        if user_input.lower() == "quit":
            break

        best_match: str | None = find_best_match(
            user_input, [q["question"] for q in knowledge_base["questions"]]
        )

        if best_match:
            answer: str = get_answer_for_question(best_match, knowledge_base)
            print(f"Bot:{answer}")
        else:
            print("Bot: I dont't know the answer can you teach me?")
            new_answer: str = input('Type the answer or "skip" to skip:')

            if new_answer.lower() != "skip":
                knowledge_base["questions"].append(
                    {"question": user_input, "answer": new_answer}
                )
                save_knowledge_base("knowledge_base.json", knowledge_base)
                print("Bot: Thank you! I learned a new response")


if __name__ == "__main__":
    chat_bot()


import openai
import json
from difflib import get_close_matches

# Set your OpenAI GPT-3 API key
openai.api_key = "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"


def load_knowledge_base(file_path: str) -> dict:
    with open(file_path, "r") as file:
        data: dict = json.load(file)
    return data


def save_knowledge_base(file_path: str, data: dict):
    with open(file_path, "w") as file:
        json.dump(data, file, indent=2)


def find_best_match(user_question: str, questions: list[str]) -> str | None:
    matches: list = get_close_matches(user_question, questions, n=1, cutoff=0.6)
    return matches[0] if matches else None


def get_answer_for_question(question: str, knowledge_base: dict) -> str | None:
    for q in knowledge_base["questions"]:
        if q["question"] == question:
            return q["answer"]


def generate_response_with_gpt3(prompt: str) -> str:
    response = openai.Completion.create(
        engine="text-davinci-002",  # You can experiment with different engines
        prompt=prompt,
        max_tokens=150,  # Adjust as needed
    )
    return response.choices[0].text.strip()


def chat_bot():
    knowledge_base: dict = load_knowledge_base("knowledge_base.json")

    while True:
        user_input: str = input("You:")

        if user_input.lower() == "quit":
            break

        best_match: str | None = find_best_match(
            user_input, [q["question"] for q in knowledge_base["questions"]]
        )

        if best_match:
            answer: str = get_answer_for_question(best_match, knowledge_base)
            print(f"Bot:{answer}")
        else:
            print("Bot:", generate_response_with_gpt3(user_input))
            new_answer: str = input('Type the answer or "skip" to skip:')

            if new_answer.lower() != "skip":
                knowledge_base["questions"].append(
                    {"question": user_input, "answer": new_answer}
                )
                save_knowledge_base("knowledge_base.json", knowledge_base)
                print("Bot: Thank you! I learned a new response")


if __name__ == "__main__":
    chat_bot()
